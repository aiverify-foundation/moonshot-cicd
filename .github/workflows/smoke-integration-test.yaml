# Cli Smoke Test

name: Smoke/Integration Tests

on:
  # Run this workflow manually from Actions tab
  workflow_dispatch:
    inputs:
      moonshot_branch:
        description: 'Moonshot Branch / Tag Name'
        required: true
        default: 'dev_main'
        type: string
  pull_request:
    branches: [dev_main, main]
    paths-ignore:
      - Dockerfile_PC
      - process_check_app/**

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  smoke-test:
    if: github.event_name == 'workflow_dispatch' || github.base_ref == 'dev_main'
    runs-on: ubuntu-latest
    timeout-minutes: 100
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ap-southeast-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

    - name: Checkout Moonshot V1 (Pull Request Review)
      uses: actions/checkout@v4
      if: github.event_name == 'pull_request'
      with:
          repository: ${{ github.repository}}
          ref: ${{ github.head_ref }}

    - name: Checkout Moonshot V1 (Workflow Dispatch)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v4
      with:
          repository: ${{ github.repository}}
          ref: ${{ inputs.moonshot_branch }}

    - name: Setup Python 3.12
      uses: actions/setup-python@v4
      with:
          python-version: '3.12'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t moonshot:test . 

    - name: Checkout Smoke Test
      uses: actions/checkout@v4
      with:
        repository: aiverify-foundation/moonshot-smoke-testing
        path: moonshot-smoke-testing

    - name: Run smoke test
      id: smoke_test
      env:
        OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}
        MOON_V1_CLI_DIR: "/app"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        #MS_TEST_CONFIG_PATH: ${{ secrets.MS_TEST_CONFIG_PATH_SMOKE }}
        #MS_CONFIG_PATH: ${{ secrets.MS_CONFIG_PATH_SMOKE }}
      run: |
        set +e
        output=$(docker run --rm \
          -e OPENAI_TOKEN="${{ secrets.OPENAI_TOKEN }}" \
          -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
          -e MOON_V1_CLI_DIR="$MOON_V1_CLI_DIR" \
          -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
          -e AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN" \
          -e AWS_REGION="$AWS_REGION" \
          --entrypoint "" \
          -v "${{ github.workspace }}/moonshot-smoke-testing:/app/moonshot-smoke-testing/" \
          moonshot:test sh -c "sh .ci/run-smoke-integration-test.sh smoke" 2>&1)

        exit_code=$?
        echo "output is "
        echo $output

        # Output multiline safely
        {
          echo "output<<EOF"
          echo "$output"
          echo "EOF"
        } >> $GITHUB_OUTPUT

        if [ $exit_code -ne 0 ]; then
          echo "STATUS=failure" >> $GITHUB_ENV
          exit $exit_code
        else
          echo "STATUS=success" >> $GITHUB_ENV
        fi


    - name: Send Slack Notification
      if: always()  # ensure it runs even if the test fails
      uses: slackapi/slack-github-action@v1.26.0
      with:
        payload: |
            {
              "workflow": "${{ github.repository }} | ${{ github.workflow }} | Smoke Test",
              "status": "${{ env.STATUS }}",
              "details": "smoke-integration-tests",
              "ref": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_CI }}



  integration-test:
    if: github.event_name == 'workflow_dispatch' || github.base_ref == 'main'
    runs-on: ubuntu-latest
    timeout-minutes: 100
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ap-southeast-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

    - name: Checkout Moonshot V1 (Pull Request Review)
      uses: actions/checkout@v4
      if: github.event_name == 'pull_request'
      with:
          repository: ${{ github.repository}}
          ref: ${{ github.head_ref }}

    - name: Checkout Moonshot V1 (Workflow Dispatch)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v4
      with:
          repository: ${{ github.repository}}
          ref: ${{ inputs.moonshot_branch }}


    - name: Setup Python 3.12
      uses: actions/setup-python@v4
      with:
          python-version: '3.12'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t moonshot:test . 

    - name: Checkout Integration Test
      uses: actions/checkout@v4
      with:
        repository: aiverify-foundation/moonshot-integration-testing
        path: moonshot-integration-testing

    
    - name: Integration test
      env:
        OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}
        MOON_V1_CLI_DIR: "/app"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        docker run --rm \
        -e OPENAI_TOKEN="${{ secrets.OPENAI_TOKEN }}" \
        -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
        -e MOON_V1_CLI_DIR="$MOON_V1_CLI_DIR" \
        -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
        -e AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN" \
        -e AWS_REGION="$AWS_REGION" \
        --entrypoint "" \
        -v "${{ github.workspace }}/moonshot-integration-testing:/app/moonshot-integration-testing/" \
        moonshot:test sh -c "sh .ci/run-smoke-integration-test.sh integration"

